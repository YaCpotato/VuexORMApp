{"remainingRequest":"/Users/yashiroshoichi/oden/VuexORMApp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yashiroshoichi/oden/VuexORMApp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yashiroshoichi/oden/VuexORMApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yashiroshoichi/oden/VuexORMApp/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/yashiroshoichi/oden/VuexORMApp/src/App.vue","mtime":1616837661651},{"path":"/Users/yashiroshoichi/oden/VuexORMApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yashiroshoichi/oden/VuexORMApp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yashiroshoichi/oden/VuexORMApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yashiroshoichi/oden/VuexORMApp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"app2\" } }, [\n    _c(\"h2\", [_vm._v(_vm._s(_vm.project.name))]),\n    _c(\"h3\", [_vm._v(_vm._s(_vm.project.id))]),\n    _c(\"h3\", [_vm._v(_vm._s(_vm.project.day))]),\n    _c(\n      \"p\",\n      [\n        _c(\"el-input\", {\n          attrs: { type: \"text\" },\n          model: {\n            value: _vm.assigntask.name,\n            callback: function($$v) {\n              _vm.$set(_vm.assigntask, \"name\", $$v)\n            },\n            expression: \"assigntask.name\"\n          }\n        }),\n        _c(\"el-button\", { on: { click: _vm.addTask } }, [_vm._v(\"タスク追加\")])\n      ],\n      1\n    ),\n    _c(\"div\", { staticClass: \"box\", attrs: { id: \"box1\" } }, [\n      _c(\n        \"ul\",\n        [\n          _c(\"span\", { staticClass: \"tag todo\" }, [_vm._v(\"To Do\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updateToDo },\n              model: {\n                value: _vm.ToDos,\n                callback: function($$v) {\n                  _vm.ToDos = $$v\n                },\n                expression: \"ToDos\"\n              }\n            },\n            _vm._l(_vm.ToDos, function(ToDo, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"danger\", effect: \"dark\" } },\n                [_vm._v(_vm._s(ToDo.name))]\n              )\n            }),\n            1\n          ),\n          _c(\"span\", { staticClass: \"tag todo\" }, [_vm._v(\"Want\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updatewantToDo },\n              model: {\n                value: _vm.wantToDos,\n                callback: function($$v) {\n                  _vm.wantToDos = $$v\n                },\n                expression: \"wantToDos\"\n              }\n            },\n            _vm._l(_vm.wantToDos, function(wantToDo, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"danger\", effect: \"dark\" } },\n                [_vm._v(_vm._s(wantToDo.name))]\n              )\n            }),\n            1\n          )\n        ],\n        1\n      )\n    ]),\n    _c(\"div\", { staticClass: \"box\", attrs: { id: \"box2\" } }, [\n      _c(\n        \"ul\",\n        [\n          _c(\"span\", { staticClass: \"tag wip\" }, [_vm._v(\"WorkInProgress\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updateWiP },\n              model: {\n                value: _vm.WorkInProgress,\n                callback: function($$v) {\n                  _vm.WorkInProgress = $$v\n                },\n                expression: \"WorkInProgress\"\n              }\n            },\n            _vm._l(_vm.WorkInProgress, function(WiP, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"warning\", effect: \"dark\" } },\n                [_vm._v(_vm._s(WiP.name))]\n              )\n            }),\n            1\n          ),\n          _c(\"span\", { staticClass: \"tag wip\" }, [_vm._v(\"Want\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updatewantWiP },\n              model: {\n                value: _vm.wantWorkInProgress,\n                callback: function($$v) {\n                  _vm.wantWorkInProgress = $$v\n                },\n                expression: \"wantWorkInProgress\"\n              }\n            },\n            _vm._l(_vm.wantWorkInProgress, function(wantWiP, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"warning\", effect: \"dark\" } },\n                [_vm._v(_vm._s(wantWiP.name))]\n              )\n            }),\n            1\n          )\n        ],\n        1\n      )\n    ]),\n    _c(\"div\", { staticClass: \"box\", attrs: { id: \"box3\" } }, [\n      _c(\n        \"ul\",\n        [\n          _c(\"span\", { staticClass: \"tag done\" }, [_vm._v(\"Done\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updateDone },\n              model: {\n                value: _vm.Dones,\n                callback: function($$v) {\n                  _vm.Dones = $$v\n                },\n                expression: \"Dones\"\n              }\n            },\n            _vm._l(_vm.Dones, function(Done, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"success\", effect: \"dark\" } },\n                [_vm._v(_vm._s(Done.name))]\n              )\n            }),\n            1\n          ),\n          _c(\"span\", { staticClass: \"tag done\" }, [_vm._v(\"Want\")]),\n          _c(\n            \"draggable\",\n            {\n              staticClass: \"dragarea\",\n              attrs: { options: { group: \"ITEMS\" } },\n              on: { change: _vm.updatewantDone },\n              model: {\n                value: _vm.wantDones,\n                callback: function($$v) {\n                  _vm.wantDones = $$v\n                },\n                expression: \"wantDones\"\n              }\n            },\n            _vm._l(_vm.wantDones, function(wantDone, id) {\n              return _c(\n                \"el-tag\",\n                { key: id, attrs: { type: \"success\", effect: \"dark\" } },\n                [_vm._v(_vm._s(wantDone.name))]\n              )\n            }),\n            1\n          )\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}